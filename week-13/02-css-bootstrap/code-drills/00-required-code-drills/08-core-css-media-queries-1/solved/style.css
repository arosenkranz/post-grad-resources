
html {
  /* rem is relative to the fontsize of an element. The default fontsize on most browsers is 16px; */
  
    font-size: 62.5%;  /* 1rem = 10px */

  /* this makes it a lot easier to calcute rem. 62.5 is 10/16 so our defualt fontsize is relative to user settings. defines what 1 rem is. So now, instead of 10px, we can write 1rem, Instead of 200px, we can write 20rem, etc..
  
  You don't have to use this trick, but it can make life a lot easier on us. On our media queries, we can just change the fontsize in our html styling, and everything using rem will change accordingly.
  */


}


body {
  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
}

.heading-primary {
  text-align: center;
  text-shadow: 0 2rem 3rem rgba(0,0,0,.5);
  font-size: 3rem;
}

.heading-sub {
  font-size: 2.5rem;
  text-align: center;
  color: seagreen;
  display: none;
}

.about {
  margin-top: 5rem;
}

.about__box--center {
  width: 40%;
  margin: auto;
  padding: 2rem;
  font-size: 2rem;
  /* If  a measurement is below 10px, it is a little unnecessary to use rem. Less than 10px is so small that keeping the absolute measurement of px will not really affect our styling on different screen sizes   */
  border-radius: 3px;
  border: solid 2px black;
}

.btn {
  margin: 2rem auto;
  display: block;
  text-decoration: none;
  padding: 1rem;
  background-color: rgb(93, 151, 216);
  color: white;
  font-family: inherit;
  font-size: 1.5rem;
  border-radius: 2rem;
  transition: .2s;
  
}

.btn:hover {
  transform: translateY(-1px);
  box-shadow: 0 .5rem .7rem rgba(0,0,0,.2);
}

.btn:active,
.btn:focus {
  transform: translateY(1px);
  outline: none;
  box-shadow: 0 .2rem .4rem rgba(0,0,0,.2);
}

/* 

It's extremely important to list your media queries in descending order of screen size. 

Right now, we have media queries for 1200 and 900 px. If our screen width is 700px, then both conditions apply.

If both apply, then there must be some kind of tie-breaker to determine which styles will be applied. That tie-breaker is which code was written last. 

Therefore, we want our media queries in descending order, so that the most recent condtion that was hit, is the one that gets styled. 
*/

@media (max-width: 1200px) {

  html {
    font-size: 55%;
  }

  .heading-primary {
    color: blue;
  }

  .about__box--center {
    background-color: orangered;
    color: white;
    border: 5px solid purple;
    width: 60%;
  }
  
}


@media (max-width: 900px) {

  html {
    font-size: 45%;
  }

  .heading-primary {
    color: purple;
  }

  .btn {
    position: absolute;
    left: 50%;
    transform: translateX(-50%) ;
    top: 8rem;
    padding: 5px;
    background-color: red;
  }

  .btn:hover {
    transform: translateX(-50%) translateY(-1px);
    background-color: green;
  }

  .btn:active,
  .btn:focus {
    transform: translateX(-50%) translateY(1px);
  }

  .about__box--center {
    background-color: yellow;
    color: black;
    border: 10px solid green;
    width: 90%;
  }

  .heading-sub {
    display: block;
  }
}

@media (max-width: 600px) {
  body {
    font-family: fantasy;
    background-image: linear-gradient(to right bottom,red, blue);
  }

  .heading-primary {
    color: white;
  }
}